{"abi":[],"bytecode":{"object":"0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220330ace45107e5e7ccad3595323f98ceee594cc435417ebb99eef97ab0a5a0c6564736f6c63430008130033","sourceMap":"306:8339:47:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x600080fdfea2646970667358221220330ace45107e5e7ccad3595323f98ceee594cc435417ebb99eef97ab0a5a0c6564736f6c63430008130033","sourceMap":"306:8339:47:-:0;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/lib/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":bytes-utils/=lib/solidity-bytes-utils/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":prb-math/=lib/prb-math/src/\",\":solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/\",\":solmate/=lib/solmate/src/\"],\"viaIR\":true},\"sources\":{\"src/lib/TickMath.sol\":{\"keccak256\":\"0xa60df88e922f99f2d5395a756c8ef0bef29e664d737c0bfc582251f879624723\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://66ebfbb5574821e2a05913fceb74fd3184b22ae9a5a5caaa939317cb8355f104\",\"dweb:/ipfs/QmRehYrPLeWszNT3CF5qXLf2TsAoPdBFAFnLmfvfW39Bf4\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.19+commit.7dd6d404"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=lib/openzeppelin-contracts/contracts/","bytes-utils/=lib/solidity-bytes-utils/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/","prb-math/=lib/prb-math/src/","solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/","solmate/=lib/solmate/src/"],"optimizer":{"enabled":true,"runs":1000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/lib/TickMath.sol":"TickMath"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"src/lib/TickMath.sol":{"keccak256":"0xa60df88e922f99f2d5395a756c8ef0bef29e664d737c0bfc582251f879624723","urls":["bzz-raw://66ebfbb5574821e2a05913fceb74fd3184b22ae9a5a5caaa939317cb8355f104","dweb:/ipfs/QmRehYrPLeWszNT3CF5qXLf2TsAoPdBFAFnLmfvfW39Bf4"],"license":"GPL-2.0-or-later"}},"version":1},"id":47}